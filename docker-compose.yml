version: '3.8'

services:
  api:
    container_name: nestjs_app
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${PORT:-3003}:3003"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/api"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${PORT:-3003}
      - DB_HOST=${DB_HOST:-postgres}
      - DB_PORT=${DB_PORT:-5432}
      - DB_USERNAME=${DB_USERNAME:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres_password}
      - DB_NAME=${DB_NAME:-nestjs_db}
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - postgres
    networks:
      - nestjs_network
    restart: unless-stopped

  postgres:
    container_name: postgres_db
    image: postgres:16-alpine
    ports:
      - "${DB_PORT:-5432}:5432"
    environment:
      - POSTGRES_USER=${DB_USERNAME:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres_password}
      - POSTGRES_DB=${DB_NAME:-nestjs_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - nestjs_network
    restart: unless-stopped
    
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=pgadmin_password
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - nestjs_network
    restart: unless-stopped

networks:
  nestjs_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local